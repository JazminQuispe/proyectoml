import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.neighbors import NearestNeighbors
from sklearn.cluster import KMeans
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
import re
import os

# =======================
# CARGA DE DATOS
# =======================
# Leer X_lda desde el archivo TXT
X_lda = np.loadtxt("X_lda.txt", delimiter=",", skiprows=1)  # Saltar la fila del encabezado
merged_df = pd.read_csv("merged_df_filtrado.csv")

merged_df["imdbId"] = merged_df["imdbId"].astype(str)
# Convertir valores no num√©ricos a NaN
merged_df["movieId"] = pd.to_numeric(merged_df["movieId"], errors="coerce")

# Reemplazar NaN con un valor v√°lido (por ejemplo, 0)
merged_df["movieId"] = merged_df["movieId"].fillna(0).astype(float).astype(int).astype(str)
# =======================
# a) B√öSQUEDA POR SIMILITUD VISUAL
# =======================
# Buscar pel√≠culas similares a una pel√≠cula con un imdbId espec√≠fico
def buscar_similares(id, n=5, metodo="imdbId"):
    """
    Busca pel√≠culas similares a una dada basada en su imdbId o movieId.
    :param id: El identificador de la pel√≠cula (imdbId o movieId).
    :param n: N√∫mero de pel√≠culas similares a devolver.
    :param metodo: M√©todo de b√∫squeda ("imdbId" o "movieId").
    :return: DataFrame con las pel√≠culas similares.
    """
    if metodo not in ["imdbId", "movieId"]:
        raise ValueError("El m√©todo de b√∫squeda debe ser 'imdbId' o 'movieId'.")

    index_pelicula = merged_df[merged_df[metodo] == str(id)].index[0]
    nn = NearestNeighbors(n_neighbors=n+1).fit(X_lda)
    dists, idxs = nn.kneighbors([X_lda[index_pelicula]])
    columnas_necesarias = ["Title", "Genre", "Year", "Poster"]
    return merged_df.iloc[idxs[0][1:]][columnas_necesarias]

def filtrar_peliculas(genero=None, anio=None):
    df = merged_df.copy()
    if genero:
        df = df[df["Genre"].str.contains(genero, case=False, na=False)]
    if anio:
        df = df[df["Year"] == str(anio)]  # Filtrar por a√±o como string
    columnas = ["Title", "Genre", "cluster", "x", "y", "Year", "imdbId", "movieId"]
    return df[columnas]

# =======================
# STREAMLIT APP
# =======================
st.set_page_config(page_title="Recomendador de Pel√≠culas", layout="centered")

# T√≠tulo centrado y en rojo
st.markdown(
    """
    <h1 style="text-align: center; color: red; font-weight: bold;">
         Movies Plus
    </h1>
    """,
    unsafe_allow_html=True
)

st.write("Explora el cat√°logo completo de pel√≠culas. Usa los botones para navegar entre p√°ginas.")

# =======================
# PAGINACI√ìN
# =======================
# N√∫mero de p√≥sters por p√°gina
POSTERS_POR_PAGINA = 20

# Estado inicial de la p√°gina
if "pagina_actual" not in st.session_state:
    st.session_state.pagina_actual = 1

# Botones para cambiar de p√°gina
col1, col2 = st.columns([3, 1])  # Ajustar proporci√≥n de columnas para mover el bot√≥n hacia la izquierda
with col1:
    if st.button("‚¨ÖÔ∏è P√°gina anterior"):
        st.session_state.pagina_actual = max(1, st.session_state.pagina_actual - 1)
with col2:
    if st.button("‚û°Ô∏è P√°gina siguiente"):
        st.session_state.pagina_actual += 1

# Calcular el rango de pel√≠culas a mostrar seg√∫n la p√°gina actual
inicio = (st.session_state.pagina_actual - 1) * POSTERS_POR_PAGINA
fin = inicio + POSTERS_POR_PAGINA
catalogo_pagina = merged_df.iloc[inicio:fin]

# Mostrar texto de la p√°gina centrado encima de las pel√≠culas
st.markdown(
    f"""
    <div style="text-align: center; font-size: 24px; font-weight: bold; color: black; margin-bottom: 20px;">
        P√°gina {st.session_state.pagina_actual}
    </div>
    """,
    unsafe_allow_html=True
)

# Mostrar p√≥sters de la p√°gina actual
cols = st.columns(5)
for idx, (title, genre, year, poster) in enumerate(catalogo_pagina[["Title", "Genre", "Year", "Poster"]].values):
    with cols[idx % 5]:
        st.image(poster, width=120, caption=f"{title} ({year})")
        st.write(f"G√©nero: {genre}")




st.write("Selecciona el m√©todo de b√∫squeda y luego ingresa el identificador para obtener recomendaciones.")

# Selecci√≥n del m√©todo de b√∫squeda
metodo_busqueda = st.radio(
    "Selecciona el m√©todo de b√∫squeda:",
    options=["imdbId", "movieId"],
    index=0  # Por defecto, selecciona imdbId
)

# Selecci√≥n del n√∫mero de recomendaciones
numero_recomendaciones = st.selectbox(
    "Selecciona el n√∫mero de pel√≠culas similares a mostrar:",
    options=[5, 10, 15],
    index=0  # Por defecto, selecciona 5
)

# Entrada del usuario
identificador_input = st.text_input(f"üìå Ingresa el `{metodo_busqueda}` de la pel√≠cula:")

# Mostrar p√≥sters seg√∫n la p√°gina actual
if identificador_input:
    try:
        # Mostrar informaci√≥n de la pel√≠cula seleccionada
        pelicula_seleccionada = merged_df[merged_df[metodo_busqueda] == str(identificador_input)]
        if pelicula_seleccionada.empty:
            st.error(f"No se encontr√≥ ninguna pel√≠cula con el `{metodo_busqueda}`: {identificador_input}")
        else:
            st.write("üé• Pel√≠cula seleccionada:")
            poster = pelicula_seleccionada.iloc[0]["Poster"]
            title = pelicula_seleccionada.iloc[0]["Title"]
            genre_seleccionado = pelicula_seleccionada.iloc[0]["Genre"]
            
            st.image(poster, width=200, caption=f"{title})")
            st.write(f"G√©nero: {genre_seleccionado}")

            # Obtener recomendaciones
            recomendaciones = buscar_similares(identificador_input, n=numero_recomendaciones, metodo=metodo_busqueda)
            
            st.write("üìå Recomendaciones:")
            
            # Dividir los g√©neros de la pel√≠cula seleccionada
            generos_seleccionados = set(genre_seleccionado.split("|"))
            
            # Calcular el rango de p√≥sters a mostrar seg√∫n la p√°gina actual
            inicio = (st.session_state.pagina_actual - 1) * POSTERS_POR_PAGINA
            fin = inicio + POSTERS_POR_PAGINA
            recomendaciones_pagina = recomendaciones.iloc[inicio:fin]

            # Mostrar p√≥sters de la p√°gina actual
            cols = st.columns(5)
            for idx, (title, genre, year, poster) in enumerate(recomendaciones_pagina.values):
                with cols[idx % 5]:
                    st.image(poster, width=120, caption=f"{title} ({year})")
                    
                    # Dividir los g√©neros de la recomendaci√≥n
                    generos_recomendacion = set(genre.split("|"))
                    
                    # Determinar el nivel de coincidencia
                    if generos_seleccionados == generos_recomendacion:
                        color = "red"  # Coinciden todos los g√©neros
                    elif generos_seleccionados & generos_recomendacion:
                        color = "blue"  # Coinciden al menos un g√©nero
                    else:
                        color = "black"  # No coinciden g√©neros
                    
                    # Mostrar el g√©nero con el color correspondiente
                    st.markdown(f"<span style='color:{color};'>G√©nero: {genre}</span>", unsafe_allow_html=True)
    except Exception as e:
        st.error(f"Error: {str(e)}")